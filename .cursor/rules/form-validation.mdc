# Form Validation Patterns

This rule outlines the standard form validation patterns used in the RelaxFlow admin application, based on the implementation in [app/login/page.tsx](mdc:app/login/page.tsx).

## Core Validation Setup

### 1. Required Imports and Dependencies

```typescript
import {useRef, useState} from 'react';
import SimpleReactValidator from 'simple-react-validator';
// In case of phone number field include the import below
import PhoneInput from 'react-phone-input-2';
import 'react-phone-input-2/lib/style.css';
// In case of password field include the import below
import {showPasswordFn, toggleIconFn} from '@/lib/reusableFn';
```

### 2. Form State Management

Always use a single state object for form data:

```typescript
const [form, setState] = useState({
  email: '',
  password: '',
  rememberMe: false
});
```

### 3. Validator Initialization

Initialize SimpleReactValidator using useRef to maintain instance across re-renders:

```typescript
const simpleValidator = useRef(new SimpleReactValidator());
const [forceUpdate, setForceUpdate] = useState(0);
```

## Form Handling Patterns

### 1. Generic Change Handler

Use a single handler for all form inputs that handles different input types:

```typescript
const handleChange = (
  e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>
) => {
  const {name, value, type, checked}: any = e.target;
  setState((prevState) => ({
    ...prevState,
    [name]: type === 'checkbox' ? checked : value
  }));
};
```

### 2. Form Submission with Validation

Always validate before submission and handle loading states:

```typescript
const handleSubmit = async (e: React.FormEvent) => {
  e.preventDefault();
  if (simpleValidator.current.allValid()) {
    setIsLoading(true);
    try {
      // API call logic here
    } catch (error) {
      console.error('Error:', error);
    } finally {
      setIsLoading(false);
    }
  } else {
    simpleValidator.current.showMessages();
    setForceUpdate(forceUpdate + 1);
  }
};
```

## Input Field Structure

### 1. Standard Input Field Pattern

Each input field should follow this structure:

```typescript
<div className='flex flex-col space-y-2'>
  <label htmlFor='fieldName' className='font-medium'>
    Field Label
  </label>
  <input
    id='fieldName'
    name='fieldName'
    type='appropriate-type'
    value={form.fieldName}
    onChange={handleChange}
    placeholder='Enter field name'
    className='input p-2 border border-gray-300 rounded'
  />
  <div style={{color: 'red'}}>
    {simpleValidator.current.message(
      'fieldName',
      form.fieldName,
      'required|validation-rules'
    )}
  </div>
</div>
```

### 2. Checkbox Pattern

For checkbox inputs:

```typescript
<div className='flex flex-row-flex-col-reverse items-center space-x-2 space-y-0'>
  <input
    id='checkboxName'
    name='checkboxName'
    type='checkbox'
    checked={form.checkboxName}
    onChange={handleChange}
    className='input p-2 border border-gray-300 rounded'
  />
  <label htmlFor='checkboxName' className='font-medium'>
    Checkbox Label
  </label>
  {simpleValidator.current.message(
    'checkboxName',
    form.checkboxName,
    'boolean'
  )}
</div>
```

### 3. Phone Input Fields

**Always use PhoneInput from 'react-phone-input-2'** for phone number fields:

```typescript
// State for country code
const [countryCode, setCountryCode] = useState('us');

// PhoneInput component
<div className='flex flex-col space-y-2'>
  <label htmlFor='phone' className='font-medium'>
    Phone Number
  </label>
  <div className='relative'>
    <Phone className='absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground' />
    <PhoneInput
      value={form.phone}
      inputStyle={{paddingLeft: '40px'}}
      placeholder='Phone Number'
      country={countryCode}
      onlyCountries={['us', 'in']}
      inputProps={{
        name: 'phone',
        required: true,
        autoFocus: true,
        className: 'input p-2 border border-gray-300 rounded pl-10 w-full'
      }}
      onChange={(phone) => setForm({...form, phone})}
    />
  </div>
  <div style={{color: 'red'}}>
    {validator.current.message(
      'phone',
      form.phone,
      'required|phone|min:10'
    )}
  </div>
</div>
```

### 4. Password Fields

**Always use reusable functions from `@/lib/reusableFn.tsx`** for password fields:

```typescript
// State for password visibility
const [showPassword, setShowPassword] = useState(false);

// Password input with toggle
<div className='flex flex-col space-y-2'>
  <label htmlFor='password' className='font-medium'>
    Password
  </label>
  <div className='relative'>
    <Lock className='absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground' />
    <Input
      id='password'
      name='password'
      type={showPasswordFn(showPassword)}
      value={form.password}
      onChange={handleChange}
      placeholder='Enter password'
      className='input p-2 border border-gray-300 rounded pl-10'
    />
    <Button
      style={{
        position: 'absolute',
        right: '10px',
        top: '50%',
        transform: 'translateY(-50%)'
      }}
      variant='ghost'
      size='icon'
      onClick={(e) => {
        e.preventDefault();
        e.stopPropagation();
        setShowPassword((prev) => !prev);
      }}
    >
      {toggleIconFn(showPassword)}
    </Button>
  </div>
  <div style={{color: 'red'}}>
    {validator.current.message(
      'password',
      form.password,
      'required|min:6'
    )}
  </div>
</div>
```

### 5. Icon Integration in Input Fields

For inputs with icons, use relative positioning:

```typescript
<div className='relative'>
  <Mail className='absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground' />
  <Input
    className='pl-10'
    // other props
  />
</div>
```

## Validation Rules

### Common Validation Patterns

1. **Required Email**: `'required|email'`
2. **Required Password with Minimum Length**: `'required|min:6'`
3. **Boolean Validation**: `'boolean'`
4. **Required Field**: `'required'`
5. **Numeric Field**: `'required|numeric'`
6. **URL Field**: `'required|url'`
7. **Phone Number**: `'required|phone|min:10'`
8. **Password Confirmation**: `'required|min:6|in:${newPassword}'`

### Validation Message Display

Always display validation messages in red text:

```typescript
<div style={{color: 'red'}}>
  {simpleValidator.current.message(
    'fieldName',
    form.fieldName,
    'validation-rules'
  )}
</div>
```

## Loading State Management

### 1. Loading State Setup

```typescript
const [isLoading, setIsLoading] = useState(false);
```

### 2. Submit Button with Loading State

```typescript
<button
  type='submit'
  className='w-full bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600 py-2 px-4 text-white'
  disabled={isLoading}
>
  {isLoading ? (
    <div className='flex items-center justify-center gap-2'>
      <Loader2 className='animate-spin' />
      <p>Processing...</p>
    </div>
  ) : (
    'Submit'
  )}
</button>
```

## Form Structure Guidelines

### 1. Form Container

```typescript
<form
  onSubmit={handleSubmit}
  className='space-y-4'
>
  {/* Form fields */}
</form>
```

### 2. Field Grouping

Group related fields in flex containers:

```typescript
<div className='flex flex-col space-y-2'>
  {/* Input field with label and validation */}
</div>
```

## Error Handling

### 1. Try-Catch Pattern

Always wrap API calls in try-catch blocks:

```typescript
try {
  // API call
} catch (error) {
  console.error('Error description:', error);
} finally {
  setIsLoading(false);
}
```

### 2. Validation Error Handling

Use forceUpdate to trigger re-renders when validation fails:

```typescript
if (!simpleValidator.current.allValid()) {
  simpleValidator.current.showMessages();
  setForceUpdate(forceUpdate + 1);
}
```


### 3. Form Reset After Success

Reset form after successful submission:

```typescript
setForm({
  currentPassword: '',
  newPassword: '',
  confirmPassword: ''
});
```

## Accessibility Considerations

### 1. Proper Labeling

Always associate labels with inputs using `htmlFor`:

```typescript
<label htmlFor='fieldName' className='font-medium'>
  Field Label
</label>
<input id='fieldName' name='fieldName' />
```

### 2. ARIA Labels

Use aria-label for interactive elements:

```typescript
<span
  onClick={handleToggle}
  role='button'
  aria-label={isVisible ? 'Hide' : 'Show'}
>
  {icon}
</span>
```

## Best Practices

1. **Type Safety**: Use TypeScript for all form components
2. **Consistent Naming**: Use descriptive names for form fields
3. **Error Boundaries**: Implement proper error handling
4. **Loading States**: Always show loading indicators during async operations
5. **Validation Feedback**: Provide immediate feedback for validation errors
6. **Accessibility**: Ensure all form elements are properly labeled and accessible
7. **Phone Input**: Always use PhoneInput component for phone fields
8. **Password Fields**: Always use reusable functions for password visibility toggle
9. **Confirm Password**: Use 'in' validation rule for password confirmation
10. **Icon Positioning**: Use absolute positioning with transform for icon alignment

## Common Validation Rules Reference

| Rule | Description | Example |
|------|-------------|---------|
| `required` | Field must not be empty | `'required'` |
| `email` | Must be valid email format | `'required|email'` |
| `min:n` | Minimum length requirement | `'required|min:6'` |
| `max:n` | Maximum length requirement | `'required|max:50'` |
| `numeric` | Must be numeric value | `'required|numeric'` |
| `url` | Must be valid URL | `'required|url'` |
| `boolean` | Must be boolean value | `'boolean'` |
| `phone` | Must be valid phone format | `'required|phone|min:10'` |
| `in:value` | Must match specific value | `'required|in:${password}'` |

Follow these patterns consistently across all form components in the application to maintain code quality and user experience.
description:
globs:
alwaysApply: false
---
